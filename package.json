{
  "dependencies": {
    "@angular/common": "12.2.16",
    "@angular/compiler": "12.2.16",
    "@angular/core": "12.2.16",
    "@angular/forms": "12.2.16",
    "@angular/platform-browser": "12.2.16",
    "@angular/platform-browser-dynamic": "12.2.16",
    "@devextreme/runtime": "2.3.14",
    "core-js": "2.4.1",
    "devexpress-diagram": "2.1.47",
    "devexpress-gantt": "4.0.12",
    "devextreme": "21.2.6",
    "devextreme-angular": "21.2.6",
    "devextreme-quill": "1.5.12",
    "es6-object-assign": "1.1.0",
    "inferno": "7.4.11",
    "inferno-clone-vnode": "7.4.11",
    "inferno-compat": "7.4.11",
    "inferno-create-class": "7.4.11",
    "inferno-create-element": "7.4.11",
    "inferno-dom": "latest",
    "inferno-extras": "7.4.11",
    "inferno-hydrate": "7.4.11",
    "jszip": "3.7.1",
    "luxon": "1.28.0",
    "rrule": "2.6.6",
    "rxjs": "6.4.0",
    "tslib": "2.3.1",
    "zone.js": "0.10.3"
  },
  "description": "This demo shows how to validate Form editors. To apply validation rules to an editor, declare them in the validationRules[] array. Specify type and other properties for each rule.\nThe following validation rules are shown in this demo:\n\n\nRequiredRule\nRequires that a validated editor has a value.\n\n\nCompareRule\nCompares the editor's value to the specified expression.\n\n\nPatternRule\nChecks whether an editor value matches a specified pattern.\n\n\nRangeRule\nChecks whether an editor value is in a specified range.\n\n\nStringLengthRule\nRequires that an editor value length is in a specified range.\n\n\nEmailRule\nRequires that an editor value matches the Email pattern.\n\n\nAsyncRule\nAllows you to add custom server-side validation logic. Rules of this type run last, only if all other rules passed. In this demo, an AsyncRule checks whether user input matches test@dx-email.com.\n\n\nTo submit form data, do the following:\n\n\nWrap the Form component in the HTML <form> element.\n\n\nUse the Button Form Item to add a button to the form. This button submits the form data.\n\n\nEnable the button's useSubmitBehavior property.\n\n\nWhen users click the button, the Form validates all editors that belong to the same validationGroup as this button. In this demo, all these editors belong to the customerData group. Form data can be submitted to a server only if input validation is successful. Enable the showValidationSummary property to display all validation errors at the bottom of the Form.\n",
  "main": "src/app/app.component.ts",
  "name": "Validation - DevExtreme Form"
}